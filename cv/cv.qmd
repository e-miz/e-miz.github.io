---
title: "CV"
bibliography: pubs.bib
nocite: |
  @*
execute:
  echo: false
  output: asis
keep-tex: false
format: 
  pdf:
    documentclass: scrartcl
    geometry:
      - margin=0.75in
      - includefoot
    filters:
      - latex-environment
    environments: [center]
    pdf-engine: lualatex
    mainfont: inter
    fontsize: 10pt
    pagestyle: empty
    colorlinks: false
    include-in-header:
      text: |
        \RedeclareSectionCommand[beforeskip=0.3\baselineskip]{section} % Less space before section heading
        \RedeclareSectionCommand[afterskip=0.3\baselineskip]{section} % Less space after section heading
        \setlength{\parskip}{0.2\baselineskip}
        \definecolor{mygray}{gray}{0.4}
        \usepackage{tabularx}
        \usepackage{ragged2e}
        \usepackage{quoting}
        \quotingsetup{vskip=0pt, rightmargin=0in, leftmargin=0.25in}
        % Section Lines
        \makeatletter
        \renewcommand{\sectionlinesformat}[4]{%
        \ifstr{#1}{section}{%
            \parbox[t]{\linewidth}{%
              \raggedsection\@hangfrom{\hskip #2#3}{#4}\par%
              \kern-.75\ht\strutbox\rule{\linewidth}{.6pt}%
            }%
          }{%
            \@hangfrom{\hskip #2#3}{#4}}% 
        }
        \makeatother
    template-partials:
      - before-body.tex # Disables default title
      - biblio.tex
    cite-method: biblatex
    biblatexoptions: [bibstyle=publist, plauthorfirstinit=true, plauthorhandling=highlight, plnumbering=none, hlyear=true, marginyear=false, linktitles=all, doi=false, url=false, isbn=false, eprint=false]
    include-before-body:
      text: |
        \plauthorname[E]{Mizrachi}
---

```{python}
import pandas as pd


def print_items(df: pd.DataFrame):
    for i in range(len(df)):
        start_date_str = df.iloc[i]["Start Date"].strftime("%b %Y")
        end_date_str = df.iloc[i]["End Date"].strftime("%b %Y")

        date_str = ""
        if start_date_str == end_date_str:
            date_str = start_date_str
        else:
            date_str = start_date_str + " - " + end_date_str

        desc_str = ""
        if pd.isnull(df.iloc[i]["Description"]):
            desc_str = ""
        else:
            desc_str = f", \\textbf{{{df.iloc[i]['Description']}}}"

        info_str = ""
        if pd.isnull(df.iloc[i]["Information"]):
            info_str = ""
        else:
            info_str = f"\\\\ \\begin{{quoting}} \\vspace{{-0.7\\baselineskip}} {df.iloc[i]['Information']} \\vspace{{-\\baselineskip}} \\end{{quoting}}"

        desc_frag = f"{df.iloc[i]['Item']}" + desc_str
        date_frag = f"\\textcolor{{mygray}}{{\\textit{{{date_str}}}}}"

        print(
            f"\\begin{{tabularx}}{{\\textwidth}}{{>{{\\RaggedRight}}p{{0.75\\textwidth}}  >{{\\RaggedLeft}}p{{0.21\\textwidth}}}} {desc_frag} & {date_frag} {info_str} \end{{tabularx}} \n"
        )


cv_df = pd.read_csv("cv_data.csv", parse_dates=[3, 4])

edu_df = cv_df.loc[cv_df["Type"] == "Degree"].loc[
    :, ["Item", "Description", "Start Date", "End Date", "Information"]
]

teach_df = cv_df.loc[cv_df["Type"] == "Teaching"].loc[
    :, ["Item", "Description", "Start Date", "End Date", "Information"]
]

research_df = cv_df.loc[cv_df["Type"] == "Research"].loc[
    :, ["Item", "Description", "Start Date", "End Date", "Information"]
]

service_df = cv_df.loc[(cv_df["Type"] == "Service")].loc[
    :, ["Item", "Description", "Start Date", "End Date", "Information"]
]

award_df = cv_df.loc[
    (cv_df["Type"] == "Award") & (cv_df["Start Date"] > "2017-01-01")
].loc[:, ["Item", "Description", "Start Date", "End Date", "Information"]]
```

```{=tex}
\begin{center}
\begin{LARGE}\textbf{Eli Mizrachi}\end{LARGE}

\begin{small}they/them/theirs | PhD Candidate | Physics | \href{mailto:emiz@umd.edu}{\faEnvelope} \href{https://github.com/e-miz}{\faGithub}\end{small}
\end{center}
```
# {{< fa user-graduate >}} Education

```{python}
print_items(edu_df)
```

# {{< fa atom >}} Research

```{python}
print_items(research_df)
```

# {{< fa school >}} Teaching

```{python}
print_items(teach_df)
```

# {{< fa trophy >}} Recent Awards

```{python}
print_items(award_df)
```

# {{< fa people-carry >}} Service

```{python}
print_items(service_df)
```

# {{< fa tools >}} Skills and Tools

```{=tex}
\begin{tabularx}{\textwidth}{>{\Centering}p{0.10\textwidth} >{\Centering}X >{\Centering}X >{\Centering}p{0.45\textwidth}} 
 & \textbf{Languages} & \textbf{Software} & \textbf{Hardware} 
\end{tabularx}
\begin{tabularx}{\textwidth}{>{\RaggedRight}p{0.10\textwidth} >{\RaggedRight}X >{\RaggedRight}X >{\RaggedRight}p{0.45\textwidth}} 
\faStar\faStar\faStar\faStar                   & Markdown, Python   &  OnShape, Notion, VS Code   & Cryogenic, High Purity, High Vacuum Systems \\
\faStar\faStar\faStar\faStar[regular]          & Spanish            &  SolidWorks, Git            & Orbital Welder, Drill Press \\
\faStar\faStar\faStar[regular]\faStar[regular] & C++, LaTeX         &  COMSOL                     & Milling Machine, Lathe, Belt Sander, Bench Grinder \\
\end{tabularx}
```
# {{< fa pen-nib >}} Selected Publications

```{=tex}
\newrefcontext[sorting=ddt]
\printbibliography[heading=none, keyword={mypublication}, keyword={selectedworks}]
\endrefcontext
```
# {{< fa chart-bar >}} Presentations

```{=tex}
\newrefcontext[sorting=ddt]
\printbibliography[heading=none, keyword={mypresentation}, keyword={selectedworks}]
\endrefcontext
```