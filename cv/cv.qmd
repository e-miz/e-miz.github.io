---
title: "" # Define title manually
bibliography: pubs.bib
execute:
  echo: false
  output: asis
format:
  typst:
    keep-typ: true
    margin:
      x: 0.5in

---

```{python}
import pandas as pd


def print_items(df: pd.DataFrame):
    for i in range(len(df)):
        start_date_str = df.iloc[i]["Start Date"].strftime("%b %Y")
        end_date_str = df.iloc[i]["End Date"].strftime("%b %Y")

        date_str = ""
        if start_date_str == end_date_str:
            date_str = start_date_str
        else:
            date_str = start_date_str + " - " + end_date_str

        desc_str = ""
        if pd.isnull(df.iloc[i]["Description"]):
            desc_str = ""
        else:
            desc_str = f", *{df.iloc[i]['Description']}*"

        info_str = ""
        if pd.isnull(df.iloc[i]["Information"]):
            info_str = ""
        else:
            info_str = f"{df.iloc[i]['Information']}"

        desc_frag = f"{df.iloc[i]['Item']}" + desc_str
        date_frag = f"_{date_str}_"

        print(
            f"#grid(columns: (75%, 25%), align(left)[{desc_frag}], align(right)[{date_frag}]) {info_str}"
        )


cv_df = pd.read_csv("cv_data.csv", parse_dates=[3, 4])

edu_df = cv_df.loc[cv_df["Type"] == "Degree"].loc[
    :, ["Item", "Description", "Start Date", "End Date", "Information"]
]

teach_df = cv_df.loc[cv_df["Type"] == "Teaching"].loc[
    :, ["Item", "Description", "Start Date", "End Date", "Information"]
]

research_df = cv_df.loc[cv_df["Type"] == "Research"].loc[
    :, ["Item", "Description", "Start Date", "End Date", "Information"]
]

service_df = cv_df.loc[(cv_df["Type"] == "Service")].loc[
    :, ["Item", "Description", "Start Date", "End Date", "Information"]
]

award_df = cv_df.loc[
    (cv_df["Type"] == "Award") & (cv_df["Start Date"] > "2017-01-01")
].loc[:, ["Item", "Description", "Start Date", "End Date", "Information"]]
```

```{=typst}
#v(-0.5in)
#set align(center)

#text(20pt)[Eli Mizrachi]

they/them/theirs | PhD | Physics | #link("mailto:emiz@umd.edu") | #link("https://github.com/e-miz")[GitHub]

#set align(left)
```
# {{< fa user-graduate >}} Education

```{=typst}
```{python}
print_items(edu_df)
```
```

# {{< fa atom >}} Research

```{=typst}
```{python}
print_items(research_df)
```
```

# {{< fa school >}} Teaching

```{=typst}
```{python}
print_items(teach_df)
```
```

# {{< fa trophy >}} Recent Awards

```{=typst}
```{python}
print_items(award_df)
```
```

# {{< fa people-carry >}} Service

```{=typst}
```{python}
print_items(service_df)
```
```

# {{< fa tools >}} Skills and Tools

```{=typst}
#{
  // center top labels
  set table(align: (_, y) => if y == 0 { center } else { left })
  table(
  columns: 4,
  stroke: none,
  table.header[*Confidence*][*Languages*][*Software*][*Hardware*],
  table.hline(),
  [⭐⭐⭐⭐], [Markdown, Python], [Quarto, OnShape, Notion, VSCode], [Cryogenic, High Purity, High Vacuum Systems],
  [⭐⭐⭐], [Spanish], [Solidworks, Git], [Orbital Welder, Drill Press],
  [⭐⭐], [C++, LaTeX, Typst], [COMSOL], [Milling Machine, Lathe, Belt Sander, Bench Grinder]
)}
```
# {{< fa pen-nib >}} Selected Publications

<!-- ```{=tex}
\newrefcontext[sorting=ddt]
\printbibliography[heading=none, keyword={mypublication}, keyword={selectedworks}]
\endrefcontext
``` -->
# {{< fa chart-bar >}} Presentations

<!-- ```{=tex}
\newrefcontext[sorting=ddt]
\printbibliography[heading=none, keyword={mypresentation}, keyword={selectedworks}]
\endrefcontext
``` -->